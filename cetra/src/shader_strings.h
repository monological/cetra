#ifndef SHADER_STRINGS_H
#define SHADER_STRINGS_H

static const char* shape_geo_shader_str = 
    "#version 400 core\n"
    "layout(lines) in;\n"
    "layout(triangle_strip, max_vertices = 6) out;\n"
    ""
    "in vec3 WorldPos_vs[2]; // World position from vertex shader\n"
    ""
    "uniform mat4 projection;\n"
    "uniform mat4 view;\n"
    "uniform float lineWidth;\n"
    "uniform float time;\n"
    ""
    "void main() {\n"
    "    vec3 startPosition = WorldPos_vs[0];\n"
    "    vec3 endPosition = WorldPos_vs[1];\n"
    ""
    "    // Direction and perpendicular vector\n"
    "    vec3 lineDir = normalize(endPosition - startPosition);\n"
    "    vec3 perpVec = normalize(vec3(-lineDir.y, lineDir.x, 0.0)) * lineWidth * 0.5;\n"
    ""
    "    // Offset vector: a small fraction of the line direction\n"
    "    vec3 offsetVec = lineDir * 0.12 * lineWidth; // Adjust this value as needed\n"
    ""
    "    gl_Position = projection * view * vec4(startPosition + perpVec - offsetVec, 1.0);\n"
    "    EmitVertex();\n"
    "    gl_Position = projection * view * vec4(startPosition - perpVec - offsetVec, 1.0);\n"
    "    EmitVertex();\n"
    "    gl_Position = projection * view * vec4(endPosition + perpVec + offsetVec, 1.0);\n"
    "    EmitVertex();\n"
    "    gl_Position = projection * view * vec4(endPosition - perpVec + offsetVec, 1.0);\n"
    "    EmitVertex();\n"
    ""
    "    EndPrimitive();\n"
    "}\n"
    ""
    "";

static const char* xyz_vert_shader_str = 
    "#version 330 core\n"
    "layout (location = 0) in vec3 aPos;\n"
    "layout (location = 1) in vec3 aColor;\n"
    "out vec3 vertexColor;\n"
    "uniform mat4 model;\n"
    "uniform mat4 view;\n"
    "uniform mat4 projection;\n"
    "void main()\n"
    "{\n"
    "    gl_Position = projection * view * model * vec4(aPos, 1.0);\n"
    "    vertexColor = aColor;\n"
    "}\n";

static const char* pbr_vert_shader_str = 
    "#version 330 core\n"
    "layout(location = 0) in vec3 aPos;\n"
    "layout(location = 1) in vec3 aNormal;\n"
    "layout(location = 2) in vec2 aTexCoords;\n"
    "layout(location = 3) in vec3 aTangent;\n"
    "layout(location = 4) in vec3 aBitangent;\n"
    ""
    "out vec3 Normal;\n"
    "out vec3 WorldPos;     // World position\n"
    "out vec3 ViewPos;      // View position\n"
    "out vec3 FragPos;      // Fragment position in clip space\n"
    "out float ClipDepth;   // Depth in clip space\n"
    "out float FragDepth;\n"
    "out vec2 TexCoords;\n"
    "out mat3 TBN;\n"
    ""
    "#define MAX_LIGHTS 75\n"
    ""
    "struct Light {\n"
    "    int type;\n"
    "    vec3 position;\n"
    "    vec3 direction;\n"
    "    vec3 color;\n"
    "    vec3 specular;\n"
    "    vec3 ambient;\n"
    "    float intensity;\n"
    "    float constant;\n"
    "    float linear;\n"
    "    float quadratic;\n"
    "    float cutOff;\n"
    "    float outerCutOff;\n"
    "    vec2 size;\n"
    "};\n"
    ""
    "uniform Light lights[MAX_LIGHTS];\n"
    "uniform int numLights;\n"
    ""
    "uniform mat4 model;\n"
    "uniform mat4 view;\n"
    "uniform mat4 projection;\n"
    ""
    "uniform vec3 camPos;\n"
    "uniform float time;\n"
    ""
    "void main() {\n"
    ""
    "    vec4 worldPos = model * vec4(aPos, 1.0);\n"
    "    WorldPos = worldPos.xyz;\n"
    ""
    "    vec4 viewPos = view * worldPos;\n"
    "    ViewPos = viewPos.xyz;\n"
    ""
    "    vec4 clipPos = projection * viewPos;\n"
    "    FragPos = clipPos.xyz;\n"
    "    ClipDepth = clipPos.z; // Depth in clip space\n"
    ""
    "    FragDepth = gl_Position.z / gl_Position.w; // Perspective divide to get normalized device coordinates\n"
    ""
    "    Normal = normalize(mat3(transpose(inverse(model))) * aNormal);\n"
    "    TexCoords = aTexCoords;\n"
    ""
    "    // Calculate the TBN matrix\n"
    "    vec3 T = normalize(mat3(model) * aTangent);\n"
    "    vec3 B = normalize(mat3(model) * aBitangent);\n"
    "    vec3 N = normalize(mat3(model) * aNormal);\n"
    "    TBN = mat3(T, B, N);\n"
    ""
    ""
    ""
    ""
    ""
    "    gl_Position = clipPos;\n"
    "}\n"
    ""
    "";

static const char* shape_frag_shader_str = 
    "#version 410 core\n"
    ""
    "out vec4 FragColor;\n"
    ""
    "uniform vec3 albedo;\n"
    ""
    "void main()\n"
    "{\n"
    "    FragColor = vec4(albedo, 1.0);\n"
    "}\n"
    "";

static const char* pbr_frag_shader_str = 
    "#version 330 core\n"
    "in vec3 Normal;\n"
    "in vec3 WorldPos;\n"
    "in vec3 ViewPos;\n"
    "in vec3 FragPos;\n"
    "in float ClipDepth;\n"
    "in float FragDepth;\n"
    "in vec2 TexCoords;\n"
    "in mat3 TBN;\n"
    "out vec4 FragColor;\n"
    ""
    "#define MAX_LIGHTS 75\n"
    ""
    "struct Light {\n"
    "    int type;\n"
    "    vec3 position;\n"
    "    vec3 direction;\n"
    "    vec3 color;\n"
    "    vec3 specular;\n"
    "    vec3 ambient;\n"
    "    float intensity;\n"
    "    float constant;\n"
    "    float linear;\n"
    "    float quadratic;\n"
    "    float cutOff;\n"
    "    float outerCutOff;\n"
    "    vec2 size;\n"
    "};\n"
    ""
    "uniform Light lights[MAX_LIGHTS];\n"
    "uniform int numLights;\n"
    ""
    "uniform mat4 view;\n"
    "uniform mat4 model;\n"
    "uniform mat4 projection;\n"
    ""
    "uniform int renderMode;\n"
    "uniform float nearClip;\n"
    "uniform float farClip;\n"
    ""
    "uniform vec3 albedo;\n"
    "uniform float metallic;\n"
    "uniform float roughness;\n"
    "uniform float ao;\n"
    "uniform vec3 camPos;\n"
    "uniform float time;\n"
    ""
    "uniform sampler2D albedoTex;\n"
    "uniform sampler2D normalTex;\n"
    "uniform sampler2D roughnessTex;\n"
    "uniform sampler2D metalnessTex;\n"
    "uniform sampler2D aoTex;\n"
    "uniform sampler2D emissiveTex;\n"
    "uniform sampler2D heightTex;\n"
    "uniform sampler2D opacityTex;\n"
    "uniform sampler2D sheenTex;\n"
    "uniform sampler2D reflectanceTex;\n"
    ""
    "uniform int albedoTexExists;\n"
    "uniform int normalTexExists;\n"
    "uniform int roughnessTexExists;\n"
    "uniform int metalnessTexExists;\n"
    "uniform int aoTexExists;\n"
    "uniform int emissiveTexExists;\n"
    "uniform int heightTexExists;\n"
    "uniform int opacityTexExists;\n"
    "uniform int sheenTexExists;\n"
    "uniform int reflectanceTexExists;\n"
    ""
    "const float PI = 3.14159265359;\n"
    ""
    "const float defaultEfficacy = 80.0; // 80 lumens per watt for LEDs\n"
    ""
    ""
    "vec3 sRGBToLinear(vec3 srgb) {\n"
    "    return pow(srgb, vec3(2.2));\n"
    "}\n"
    ""
    "vec3 applyGammaCorrection(vec3 color, float gamma) {\n"
    "    return pow(color, vec3(1.0 / gamma));\n"
    "}\n"
    ""
    "float calculateAttenuation(float distance, float constant, float linear, float quadratic) {\n"
    "    return 1.0 / (constant + linear * distance + quadratic * (distance * distance));\n"
    "}\n"
    ""
    "vec3 calculateDiffuse(vec3 N, vec3 L, vec3 lightColor, float distance, float constant, float linear, float quadratic) {\n"
    "    float diff = max(dot(N, L), 0.0);\n"
    "    float attenuation = calculateAttenuation(distance, constant, linear, quadratic);\n"
    "    return diff * lightColor * attenuation;\n"
    "}\n"
    ""
    "void main() {\n"
    "    vec3 albedoMap = vec3(1.0);  // Default white color\n"
    "    if (albedoTexExists > 0) {\n"
    "        albedoMap = texture(albedoTex, TexCoords).rgb;\n"
    "        albedoMap = sRGBToLinear(albedoMap);  // Convert from sRGB to Linear RGB\n"
    "    }\n"
    ""
    "	vec3 normalMap;\n"
    "	if (normalTexExists > 0 && false) {\n"
    "		normalMap = texture(normalTex, TexCoords).rgb;\n"
    "		// Transform normal from [0,1] range to [-1,1] range and apply TBN matrix\n"
    "		normalMap = normalMap * 2.0 - 1.0;\n"
    "		normalMap = normalize(TBN * normalMap);\n"
    "	} else {\n"
    "		normalMap = normalize(Normal); // Use vertex normal if no normal map\n"
    "	}\n"
    ""
    "	float roughnessMap = roughness;\n"
    "	if (roughnessTexExists > 0) {\n"
    "		roughnessMap = texture(roughnessTex, TexCoords).r;\n"
    "	}\n"
    ""
    "	float metallicMap = metallic;\n"
    "	if (metalnessTexExists > 0) {\n"
    "		metallicMap = texture(metalnessTex, TexCoords).r;\n"
    "	}\n"
    ""
    "	float aoMap = ao;\n"
    "	if (aoTexExists > 0) {\n"
    "		aoMap = texture(aoTex, TexCoords).r;\n"
    "	}\n"
    ""
    "	vec3 emissiveMap = vec3(0.0);\n"
    "	if (emissiveTexExists > 0) {\n"
    "		emissiveMap = texture(emissiveTex, TexCoords).rgb;\n"
    "	}\n"
    ""
    "	float opacity = 1.0;\n"
    "	if (opacityTexExists > 0) {\n"
    "		opacity = texture(opacityTex, TexCoords).r;\n"
    "	}\n"
    ""
    "	vec3 sheenColor = vec3(0.0);\n"
    "	if (sheenTexExists > 0) {\n"
    "		sheenColor = texture(sheenTex, TexCoords).rgb;\n"
    "	}\n"
    ""
    "	vec3 reflectance = vec3(0.04); // Default reflectance value\n"
    "	if (reflectanceTexExists > 0) {\n"
    "		reflectance = texture(reflectanceTex, TexCoords).rgb;\n"
    "	}\n"
    ""
    "	// Use declared variables for final values\n"
    "	vec3 finalAlbedo = albedoMap;\n"
    "	float finalMetallic = metallicMap;\n"
    "	float finalRoughness = roughnessMap;\n"
    "	float finalAO = aoMap;\n"
    ""
    "    // Normalize the normal vectors\n"
    "    vec3 N = normalize(normalMap);\n"
    "    vec3 V = normalize(camPos - FragPos);\n"
    "    vec3 L = normalize(lights[0].position - FragPos);\n"
    "    float distance = length(lights[0].position - FragPos);\n"
    ""
    "    // Light parameters\n"
    "    float constant = lights[0].constant;\n"
    "    float linear = lights[0].linear;\n"
    "    float quadratic = lights[0].quadratic;\n"
    "    vec3 lightColor = lights[0].color * lights[0].intensity;\n"
    ""
    "    // Adjust ambient light intensity\n"
    "    vec3 ambient = finalAlbedo * 0.09;\n"
    ""
    "	// Apply albedo to diffuse\n"
    "    vec3 diffuse = calculateDiffuse(N, L, lightColor, distance, constant, linear, quadratic) * finalAlbedo;\n"
    ""
    "    vec3 color = ambient + diffuse;\n"
    "    color = clamp(color, 0.0, 1.0);\n"
    ""
    "    color = applyGammaCorrection(color, 2.2);  // Apply gamma correction\n"
    ""
    "    FragColor = vec4(color, 1.0);\n"
    "}\n"
    "";

static const char* shape_vert_shader_str = 
    "#version 330 core\n"
    "layout(location = 0) in vec3 aPos;\n"
    "layout(location = 1) in vec3 aNormal;\n"
    "layout(location = 2) in vec2 aTexCoords;\n"
    "layout(location = 3) in vec3 aTangent;\n"
    "layout(location = 4) in vec3 aBitangent;\n"
    ""
    "out vec3 Normal_vs;\n"
    "out vec3 WorldPos_vs;     // World position\n"
    "out vec3 ViewPos_vs;      // View position\n"
    "out vec3 FragPos_vs;      // Fragment position in clip space\n"
    "out float ClipDepth_vs;   // Depth in clip space\n"
    "out float FragDepth_vs;\n"
    "out vec2 TexCoords_vs;\n"
    "out mat3 TBN_vs;\n"
    ""
    "#define MAX_LIGHTS 75\n"
    ""
    "struct Light {\n"
    "    int type;\n"
    "    vec3 position;\n"
    "    vec3 direction;\n"
    "    vec3 color;\n"
    "    vec3 specular;\n"
    "    vec3 ambient;\n"
    "    float intensity;\n"
    "    float constant;\n"
    "    float linear;\n"
    "    float quadratic;\n"
    "    float cutOff;\n"
    "    float outerCutOff;\n"
    "    vec2 size;\n"
    "};\n"
    ""
    "uniform Light lights[MAX_LIGHTS];\n"
    "uniform int numLights;\n"
    ""
    "uniform mat4 model;\n"
    "uniform mat4 view;\n"
    "uniform mat4 projection;\n"
    ""
    "uniform vec3 camPos;\n"
    "uniform float time;\n"
    ""
    "void main() {\n"
    ""
    "    vec4 worldPos = model * vec4(aPos, 1.0);\n"
    "    WorldPos_vs = worldPos.xyz;\n"
    ""
    "    vec4 viewPos = view * worldPos;\n"
    "    ViewPos_vs = viewPos.xyz;\n"
    ""
    "    vec4 clipPos = projection * viewPos;\n"
    "    FragPos_vs = clipPos.xyz;\n"
    "    ClipDepth_vs = clipPos.z; // Depth in clip space\n"
    ""
    "    // Perspective divide to get normalized device coordinates\n"
    "    FragDepth_vs = gl_Position.z / gl_Position.w;\n"
    ""
    "    Normal_vs = normalize(mat3(transpose(inverse(model))) * aNormal);\n"
    "    TexCoords_vs = aTexCoords;\n"
    ""
    "    // Calculate the TBN matrix\n"
    "    vec3 T = normalize(mat3(model) * aTangent);\n"
    "    vec3 B = normalize(mat3(model) * aBitangent);\n"
    "    vec3 N = normalize(mat3(model) * aNormal);\n"
    "    TBN_vs = mat3(T, B, N);\n"
    ""
    "    gl_Position = clipPos;\n"
    "}\n"
    ""
    "";

static const char* xyz_frag_shader_str = 
    "#version 330 core\n"
    "in vec3 vertexColor;\n"
    "out vec4 FragColor;\n"
    "uniform mat4 view;\n"
    "uniform mat4 model;\n"
    "uniform mat4 projection;\n"
    "void main()\n"
    "{\n"
    "    FragColor = vec4(vertexColor, 1.0);\n"
    "}\n";

#endif // SHADER_STRINGS_H
